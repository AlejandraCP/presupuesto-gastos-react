{"version":3,"sources":["components/Header.js","components/Formulario.js","components/Expense.js","components/Listado.js","components/Budget.js","components/Residuary.js","Helper.js","components/BudgetControl.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","Formulario","nameSpending","React","createRef","quantitySpending","createExpense","e","preventDefault","expense","_this","current","value","addExpensesProps","currentTarget","reset","onSubmit","this","type","ref","placeholder","Component","Expense","Listado","Object","keys","expenses","map","key","components_Expense","Budget","budget","Residuary","presupuesto","restante","residuary","BudgetControl","components_Budget","components_Residuary","App","state","addExpenses","expensesData","objectSpread","concat","Date","now","subtractBudget","setState","quantity","parseInt","getBudget","valBudget","totalPresupuesto","validarPresupuesto","prompt","components_Header","components_Formulario","components_Listado","components_BudgetControl","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a93495e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div className='letter-white text-center'>\r\n            {props.titulo}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass Formulario extends Component {\r\n\r\n    nameSpending = React.createRef();\r\n    quantitySpending = React.createRef();\r\n\r\n    createExpense = (e) => {\r\n        e.preventDefault();\r\n        const expense = {\r\n            nameSpending: this.nameSpending.current.value,\r\n            quantitySpending: this.quantitySpending.current.value\r\n        }\r\n        this.props.addExpensesProps(expense)\r\n        e.currentTarget.reset();\r\n    }\r\n    render() {\r\n      return (\r\n        <div>\r\n            <form onSubmit={this.createExpense}>\r\n                <h2>Agrega tus gastos aqui</h2>\r\n                <div className=\"\">\r\n                    <label>Nombre Gasto</label>\r\n                    <input className=\"\" type=\"text\" ref={this.nameSpending} placeholder=\"Ej. Transporte\" />\r\n                </div>\r\n\r\n                <div className=\"\">\r\n                    <label>Cantidad</label>\r\n                    <input className=\"\" type=\"number\" ref={this.quantitySpending} placeholder=\"Ej. 300\" />\r\n                </div>\r\n\r\n                <input className=\"\" type=\"submit\" value=\"Agregar\" />\r\n            </form>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Formulario;\r\n","import React, {Component} from 'react';\r\n\r\nclass Expense extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <span>{this.props.expense.nameSpending}</span> <span>{this.props.expense.quantitySpending}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Expense;","import React, {Component} from 'react';\r\nimport Expense from './Expense';\r\n\r\n\r\nclass Listado extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Listado de Gastos</h2>\r\n                {Object.keys(this.props.expenses).map(key => (\r\n                    <Expense key={key} expense={this.props.expenses[key]}/>\r\n\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Listado;","import React from 'react';\r\n\r\nconst Budget = props => {\r\n    return (\r\n        <div>\r\n                <p>Presupuesto: S./ {props.budget}</p>\r\n        </div>\r\n    )\r\n}\r\n  \r\nexport default Budget;","import React from 'react';\r\nimport { revisarPresupuesto } from '../Helper';\r\n\r\nconst Residuary = props => {\r\n    const residuary = props.residuary\r\n    const budget = props.budget\r\n    return (\r\n        <div className={revisarPresupuesto(budget, residuary)}>\r\n                <p>Restante: S./ {residuary}</p>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Residuary;","export const validarPresupuesto = presupuesto => {\r\n    let totalPresupuesto = parseInt(presupuesto, 10)|| 0;\r\n\r\n    if(totalPresupuesto > 0 ) {\r\n        return totalPresupuesto;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const revisarPresupuesto = (presupuesto,restante) => {\r\n    let clase;\r\n    // Comprobar el 25% \r\n    if( (presupuesto / 4) > restante) {\r\n         clase = 'danger';\r\n    } else if( (presupuesto / 2) > restante) {\r\n        clase = 'alert'\r\n    } else {\r\n        clase = 'safe';\r\n    }\r\n    return clase;\r\n} ","import React, { Component } from 'react';\r\nimport Budget from './Budget';\r\nimport Residuary from './Residuary';\r\n\r\nclass BudgetControl extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Budget budget={this.props.budget}/>\r\n                <Residuary residuary={this.props.residuary} budget={this.props.budget}/>\r\n            </div>\r\n            );\r\n        }\r\n    }\r\n  \r\nexport default BudgetControl;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Formulario from './Formulario';\nimport Listado from './Listado';\nimport { validarPresupuesto } from '../Helper';\nimport BudgetControl from './BudgetControl';\nclass App extends Component {\n\n  state = {\n    expenses: {},\n    budget: '',\n    residuary: ''\n  }\n\n  componentDidMount() {\n    this.getBudget();\n    \n  }\n\n  getBudget() {\n    let budget = prompt('Ingresar presupuesto');\n    let valBudget = validarPresupuesto(budget);\n    if(valBudget) {\n      this.setState({\n        budget: valBudget,\n        residuary: valBudget\n      })\n    } else {\n      this.getBudget();\n    }\n    \n  }\n\n  addExpenses = (expensesData) => {\n    const expense = {...this.state.expenses};\n\n    expense[`gasto${Date.now()}`] = expensesData;\n    this.subtractBudget(expensesData.quantitySpending)\n\n    this.setState({\n      expenses: expense\n    })\n\n    \n  }\n\n  subtractBudget = quantity => {\n    let residuary = parseInt(this.state.residuary) - parseInt(quantity);\n\n    this.setState({\n      residuary: residuary\n    })\n  }\n\n\n  render() {\n    const headerTitle = 'Gasto mensual'\n    return (\n      <div>\n        <div>\n          <Header titulo={headerTitle}/>\n        </div>\n        <div className='d-flex just-content-start'>\n          <div className='w-50 bg-white p-1 border-blue'>\n            <Formulario addExpensesProps={this.addExpenses}/>\n          </div>\n          <div className='w-50 bg-white p-1 border-blue'>\n            <Listado expenses={this.state.expenses}/>\n            <BudgetControl \n              budget={this.state.budget}\n              residuary={this.state.residuary} \n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}